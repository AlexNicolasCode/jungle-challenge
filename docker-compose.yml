services:
  web:
    container_name: web
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: development
      API_GATEWAY: ${API_GATEWAY}
    networks:
      - challenge-network

  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
    ports:
      - '3001:3001'
    volumes:
      - .:/app
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/api-gateway/node_modules
    environment:
      NODE_ENV: development
      DB_PASSWORD: ${DB_PASSWORD}
      DB_USER: ${DB_USER}
      API_GATEWAY: ${API_GATEWAY}
      API_GATEWAY_PORT: ${API_GATEWAY_PORT}
      AUTH_JWT_SECRET: ${AUTH_JWT_SECRET}
      AUTH_SERVICE: ${AUTH_SERVICE}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
      TASKS_SERVICE: ${TASKS_SERVICE}
      TASKS_SERVICE_PORT: ${TASKS_SERVICE_PORT}
      WEBSOCKET_API_KEY: ${WEBSOCKET_API_KEY}
    depends_on:
      auth-service:
        condition: service_started
      tasks-service:
        condition: service_started
      db:
        condition: service_started
      rabbitmq:
        condition: service_started
    networks:
      - challenge-network

  auth-service:
    container_name: auth-service
    build:
      context: .
      dockerfile: ./apps/auth-service/Dockerfile
    ports:
      - '3002:3002'
    volumes:
      - .:/app
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/auth-service/node_modules
    environment:
      NODE_ENV: development
      AUTH_SERVICE_PORT: 3002
      DB_PASSWORD: ${DB_PASSWORD}
      DB_USER: ${DB_USER}
      AUTH_JWT_SECRET: ${AUTH_JWT_SECRET}
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_started
    networks:
      - challenge-network

  tasks-service:
    container_name: tasks-service
    build:
      context: .
      dockerfile: ./apps/tasks-service/Dockerfile
    ports:
      - '3003:3003'
    volumes:
      - .:/app
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/tasks-service/node_modules
    environment:
      NODE_ENV: development
      TASKS_SERVICE_PORT: 3003
      DB_PASSWORD: ${DB_PASSWORD}
      DB_USER: ${DB_USER}
      RABBITMQ_URL: ${RABBITMQ_URL}
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_started
    networks:
      - challenge-network

  notification-service:
    container_name: notification-service
    build:
      context: .
      dockerfile: ./apps/notification-service/Dockerfile
    ports:
      - '3004:3004'
    volumes:
      - .:/app
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/notification-service/node_modules
    environment:
      NODE_ENV: development
      RABBITMQ_URL: ${RABBITMQ_URL}
      WEBSOCKET_API_KEY: ${WEBSOCKET_API_KEY}
    depends_on:
      api-gateway:
        condition: service_started
      db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - challenge-network

  db:
    image: postgres:17.5-alpine3.21
    container_name: db
    ports:
      - '5432:5432'
    networks:
      - challenge-network
    restart: always
    volumes:
      - ./init_db.sh:/docker-entrypoint-initdb.d/init_db.sh
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: challenge_db

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq
    restart: always
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - challenge-network
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes: ['rabbitmq_data:/var/lib/rabbitmq']
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  challenge-network:
    driver: bridge